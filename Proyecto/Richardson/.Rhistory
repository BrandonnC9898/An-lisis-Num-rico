derFun3 = function(x){return(cos(x)-sin(x))}
y3 = fun3(x)
datos = derivada(x,y3,h=0.001,n=10)
d = derFun3(datos$x)
imprimir(datos,d)
library(Richardson)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.01,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
y3 = fun3(x)
datos = derivada(x,y3,h=0.001,n=8)
d = derFun3(datos$x)
imprimir(datos,d)
library(Richardson)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.1,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
y3 = fun3(x)
datos = derivada(x,y3,h=0.001,n=8)
d = derFun3(datos$x)
imprimir(datos,d)
library(Richardson)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.1,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
y3 = fun3(x)
datos = derivada(x,y3,h=0.001,n=8)
d = derFun3(datos$x)
imprimir(datos,d)
library(Richardson)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.1,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
x = seq(-(pi/8),(pi/8),by=(pi/2))
y3 = fun3(x)
datos = derivada(x,y3,h=0.001,n=8)
d = derFun3(datos$x)
imprimir(datos,d)
library(Richardson)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.1,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
x = seq((-pi/8),(pi/8),by=(pi/2))
y3 = fun3(x)
datos = derivada(x,y3,h=0.001,n=8)
d = derFun3(datos$x)
imprimir(datos,d)
library(Richardson)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.1,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
x = seq((-pi/8),(pi/8),by=(pi/2))
y3 = fun3(x)
datos = derivada(x,y3,h=0.01,n=8)
d = derFun3(datos$x)
imprimir(datos,d)
library(Richardson)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.1,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
x = seq((-pi/8),(pi/8),by=(pi/2))
y3 = fun3(x)
datos = derivada(x,y3,h=0.001,n=8)
d = derFun3(datos$x)
imprimir(datos,d)
library(Richardson)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.1,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
# x = seq((-pi/8),(pi/8),by=(pi/2))
y3 = fun3(x)
datos = derivada(x,y3,h=0.001,n=8)
d = derFun3(datos$x)
imprimir(datos,d)
x = seq((-pi/8),(pi/8),by=(pi/2))
x
x = seq((-2*pi),(2*pi),by=(pi/2))
x
library(Richardson)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.1,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
x = seq((-2*pi),(2*pi),by=(pi/2))
y3 = fun3(x)
datos = derivada(x,y3,h=0.001,n=8)
d = derFun3(datos$x)
imprimir(datos,d)
library(Richardson)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.1,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
x = seq((-2*pi),(2*pi),by=(pi/8))
y3 = fun3(x)
datos = derivada(x,y3,h=0.001,n=8)
d = derFun3(datos$x)
imprimir(datos,d)
library(Richardson)
library(Richardson)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.1,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
x = seq((-2*pi),(2*pi),by=(pi/8))
y3 = fun3(x)
datos = derivada(x,y3,h=0.001,n=8)
d = derFun3(datos$x)
imprimir(datos,d)
library(Richardson)
library(Richardson)
library(Richardson)
funcion <- function(x){
return(cos(x))
}
x = seq(-pi/2, pi/2, by = pi/4)
y = fun(x)
Richardson::integral(x, y)
derivada(x, y)
derivada(x, y)
library("Richardson", lib.loc="~/R/win-library/3.5")
Richardson::integral(x, y)
derivada(x, y)
Richardson::integral(x, y)
derivada(x, y)
Richardson::integral(x, y)
derivada(x, y)
# Este script se creo con el propósito de mostar algunos ejemplos del uso de la librería Richardson.
# Por: Brandonn Cruz y Diego Barajas.
library(Richardson)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.1,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
x = seq((-2*pi),(2*pi),by=(pi/8))
y3 = fun3(x)
datos = derivada(x,y3,h=0.001,n=8)
d = derFun3(datos$x)
imprimir(datos,d)
library(Richardson)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.1,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
x = seq((-2*pi),(2*pi),by=(pi/8))
y3 = fun3(x)
imprimir = function(datos,derivada){
cat("x\t\ty\t\tR\t\te\tanalitica\n")
for(i in 1:length(datos$x)){
cat(datos$x[i],"\t",datos$y[i],"\t",datos$resultados[i],"\t",datos$error[i],"\t",derivada[i],"\n")
}
}
fun = function(x){return(x^2)}
derFun = function(x){return(2*x)}
x = seq(-1,3,by=0.25)
y = fun(x)
datos = derivada(x,y)
d = derFun(datos$x)
imprimir(datos,d)
fun2 = function(x){return(x*exp(x))}
derFun2 = function(x){return(exp(x)+exp(x)*x)}
y2 = fun2(x)
datos = derivada(x,y2,h=0.1,n=2)
d = derFun2(datos$x)
imprimir(datos,d)
fun3 = function(x){return(sin(x)+cos(x))}
derFun3 = function(x){return(cos(x)-sin(x))}
x = seq((-2*pi),(2*pi),by=(pi/8))
y3 = fun3(x)
datos = derivada(x,y3,h=0.001,n=8)
d = derFun3(datos$x)
imprimir(datos,d)
funcion <- function(x){
return(cos(x))
}
x = seq(-pi/2, pi/2, by = pi/4)
y = fun(x)
Richardson::integral(x, y)
funcion <- function(x){
return(cos(x))
}
x = seq(-pi/2, pi/2, by = pi/4)
y = funcion(x)
cat("Integral de cos(x) definida desde -pi/2 hasta pi/2\n")
Richardson::integral(x, y)
funcion <- function(x){
return(cos(x))
}
x = seq(-pi/2, pi/2, by = pi/4)
y = funcion(x)
cat("Integral de cos(x) definida desde -pi/2 hasta pi/2\n")
Richardson::integral(x, y)
funcion <- function(x){
return(x^2)
}
x = seq(-2, 2, by = 0.1)
y = funcion(x)
cat("Integral de x^2 definida desde -2 hasta 2\n")
Richardson::integral(x, y)
funcion <- function(x){
return(e^(x^2))
}
x = seq(0, 1, by = 0.01)
y = funcion(x)
cat("Integral de e^(x^2) definida desde 0 hasta 1 \n")
Richardson::integral(x, y)
funcion <- function(x){
return(x^2)
}
x = seq(-2, 2, by = 0.01)
funcion <- function(x){
return(x^2)
}
x = seq(-2, 2, by = 0.01)
y = funcion(x)
cat("Integral de x^2 definida desde -2 hasta 2\n")
Richardson::integral(x, y)
x = seq(-2, 2, by = 0.0001)
y = funcion(x)
cat("Integral de x^2 definida desde -2 hasta 2\n")
Richardson::integral(x, y)
funcion <- function(x){
return(e^(x^2))
}
x = seq(0, 1, by = 0.01)
y = funcion(x)
funcion <- function(x){
return(cos(x))
}
x1 = seq(-pi/2, pi/2, by = pi/4)
y1 = funcion(x)
funcion <- function(x){
return(cos(x))
}
x1 = seq(-pi/2, pi/2, by = pi/4)
y1 = funcion(x)
funcion <- function(x){
return(cos(x))
}
x1 = seq(-pi/2, pi/2, by = pi/4)
y1 = funcion(x1)
cat("Integral de cos(x) definida desde -pi/2 hasta pi/2\n")
Richardson::integral(x1, y1)
funcion <- function(x){
return(cos(x))
}
x1 = seq(-pi/2, pi/2, by = pi/8)
y1 = funcion(x1)
cat("Integral de cos(x) definida desde -pi/2 hasta pi/2\n")
Richardson::integral(x1, y1)
funcion2 <- function(x){
return(x^2)
}
x2 = seq(-2, 2, by = 0.0001)
y2 = funcion2(x2)
cat("Integral de x^2 definida desde -2 hasta 2\n")
Richardson::integral(x2, y2)
funcion3 <- function(x){
return(exp(x^2))
}
x3 = seq(0, 1, by = 0.01)
y3 = funcion3(x3)
cat("Integral de e^(x^2) definida desde 0 hasta 1 \n")
Richardson::integral(x3, y3)
funcion3 <- function(x){
return(exp(x^2))
}
x3 = seq(0, 2, by = 0.01)
y3 = funcion3(x3)
cat("Integral de e^(x^2) definida desde 0 hasta 1 \n")
Richardson::integral(x3, y3)
x3 = seq(1, 2, by = 0.01)
y3 = funcion3(x3)
cat("Integral de e^(x^2) definida desde 0 hasta 1 \n")
Richardson::integral(x3, y3)
x3 = seq(1, 2, by = 0.001)
y3 = funcion3(x3)
cat("Integral de e^(x^2) definida desde 0 hasta 1 \n")
Richardson::integral(x3, y3)
x3 = seq(0, 1, by = 0.001)
y3 = funcion3(x3)
cat("Integral de e^(x^2) definida desde 0 hasta 1 \n")
Richardson::integral(x3, y3)
